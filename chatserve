#!/usr/bin/env python3

from socket import socket, AF_INET, SHUT_RDWR, SOCK_STREAM, getfqdn
import sys


def main():
    host = ''
    port = int(sys.argv[1])
    server_shutdown = False
    handle = 'hamiltj2> '
    quit_cmd = '/quit'
    end_of_message = '||'

    with socket(AF_INET, SOCK_STREAM) as sock:
        sock.bind((host, port))
        sock.listen(1)
        print( 'Now listening for incoming connections on %s:%d.' % (getfqdn(), port) )

        while True:
            conn, addr = sock.accept()

            with conn:
                quit_detected = False
                print( 'Connected to %s:%d.' % (addr[0], addr[1]) )

                while not quit_detected:
                    data = conn.recv(1024)

                    if data.decode() == quit_cmd:
                        quit_detected = True
                        print( 'Client %s:%d disconnected.' % (addr[0], addr[1]) )
                        conn.shutdown(SHUT_RDWR)
                        break

                    print('%s' % data.decode())
                    print('%s' % handle, end='')
                    message = input()

                    if message == quit_cmd:
                        server_shutdown = True
                        message = message + end_of_message
                    else:
                        message = handle + message + end_of_message

                    try:
                        conn.sendall(message.encode())
                    except:
                        print( 'Client %s:%d disconnected.' % (addr[0], addr[1]) )
                        quit_detected = True

                    if server_shutdown:
                        shutdown_server(sock, conn)

                conn.close()


def shutdown_server(sock, conn):

    # Close the client connection
    conn.shutdown(SHUT_RDWR)
    conn.close()

    # Stop listening on the port the server is bound to
    sock.shutdown(SHUT_RDWR)
    sock.close()

    # Exit the process
    raise SystemExit(0)


if __name__ == "__main__":
    main()
